type: edu
files:
  - name: test/GuessAnimalTest.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.io.IOException;
      import java.util.stream.Stream;
      
      public class GuessAnimalTest extends StageTest<String> {
          private static final int RUNS_COUNT = 10;
      
          final String[] script = new String[]{
                  "animals",
                  "positive-answers",
                  "negative-answers",
                  "unclear-answers"
          };
      
          @DynamicTest(data = "script")
          CheckResult runScripts(final String script) throws IOException {
              return new Scenario(script).check();
          }
      
          @DynamicTest()
          CheckResult testRandomFarewell() {
              return checkRandom("cat\nyes\n",
                      "You program should use different ways to farewell the user.");
          }
      
          @DynamicTest
          CheckResult testRandomYesNoClarification() {
              return checkRandom("cat\n#\n",
                      "You program should use different ways to ask clarification question.");
          }
      
          private CheckResult checkRandom(final String input, final String errorMessage) {
              final var isRandom = Stream.generate(() -> {
                  final var main = new TestedProgram();
                  main.start();
                  return main.execute(input);
              }).limit(RUNS_COUNT).distinct().count() > 1;
      
              return isRandom ? CheckResult.correct() : CheckResult.wrong(errorMessage);
          }
      }
    learner_created: false
  - name: test/Scenario.java
    visible: false
    text: |-
      import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.io.File;
      import java.io.IOException;
      import java.util.Map;
      import java.util.function.Predicate;
      import java.util.regex.Pattern;
      
      import static java.text.MessageFormat.format;
      import static java.util.function.Predicate.not;
      import static org.hyperskill.hstest.testcase.CheckResult.correct;
      import static org.hyperskill.hstest.testcase.CheckResult.wrong;
      
      public class Scenario {
          private TestedProgram main;
          private String output = "";
          private final File dataFile;
          private final File scriptFile;
      
          Scenario(String name) {
              dataFile = new File("test/" + name + ".data.yaml");
              scriptFile = new File("test/" + name + ".script.yaml");
              System.out.println("Scenario '" + name + "' is started.");
              System.out.println();
          }
      
          CheckResult check() {
      
              final Object[][] data;
              final String[][] script;
      
              try {
                  data = new YAMLMapper().readValue(dataFile, String[][].class);
                  script = new YAMLMapper().readValue(scriptFile, String[][].class);
              } catch (IOException e) {
                  e.printStackTrace();
                  return wrong("Cannot find the files "
                          + dataFile.getName()
                          + " or "
                          + scriptFile.getName()
                          + ", looks like you deleted or renamed it. Please, revert the changes.");
              }
      
              for (var values : data) {
                  for (var action : script) {
                      final var command = action[0];
                      switch (command) {
                          case "start":
                              main = new TestedProgram();
                              output = action.length == 1
                                      ? main.start()
                                      : main.start(format(action[1], values).split(" "));
                              output = output.trim();
                              continue;
                          case "input":
                              output = main.execute(format(action[1], values)).trim();
                              continue;
                          case "finish":
                              if (main.isFinished()) {
                                  continue;
                              }
                              return wrong(format(action[1], values));
                          default:
                              final Map<String, Predicate<String>> validation = Map.of(
                                      "contains", output::contains,
                                      "not contains", not(output::contains),
                                      "file exists", file -> new File(file).exists(),
                                      "file delete", file -> new File(file).delete(),
                                      "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                      "matches", output::matches);
      
                              final var expected = format(action[1], values);
                              if (validation.get(command).test(expected)) {
                                  continue;
                              }
                              final var feedback = format(action[2], values) + System.lineSeparator()
                                      + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                      + "Actual data is: \"" + output + "\".";
                              return wrong(feedback);
                      }
                  }
              }
              return correct();
          }
      
      }
    learner_created: false
  - name: src/animals/Main.java
    visible: true
    text: |
      package animals;
      
      public class Main {
      }
    learner_created: false
  - name: src/animals/greet/TimedGreeter.java
    visible: true
    learner_created: true
  - name: src/animals/util/Range.java
    visible: true
    learner_created: true
  - name: src/animals/base/Animal.java
    visible: true
    learner_created: true
  - name: src/animals/base/Application.java
    visible: true
    learner_created: true
  - name: src/animals/input/AskerBuilder.java
    visible: true
    learner_created: true
  - name: src/animals/input/PersistentAsker.java
    visible: true
    learner_created: true
  - name: src/animals/input/ConcreteAsker.java
    visible: true
    learner_created: true
  - name: src/animals/input/Asker.java
    visible: true
    learner_created: true
  - name: src/animals/linguistics/NounPhrase.java
    visible: true
    learner_created: true
  - name: test/unclear-answers.script.yaml
    visible: true
    learner_created: true
  - name: test/animals.script.yaml
    visible: true
    learner_created: true
  - name: test/positive-answers.data.yaml
    visible: true
    learner_created: true
  - name: test/positive-answers.script.yaml
    visible: true
    learner_created: true
  - name: test/unclear-answers.data.yaml
    visible: true
    learner_created: true
  - name: src/animals/greet/Greeter.java
    visible: true
    learner_created: true
  - name: test/negative-answers.data.yaml
    visible: true
    learner_created: true
  - name: test/negative-answers.script.yaml
    visible: true
    learner_created: true
  - name: test/animals.data.yaml
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/11079#comment
status: Failed
feedback:
  message: Compilation Failed
  time: Mon, 03 Oct 2022 07:17:34 UTC
record: 1
