type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    import animals.base.Application;

    public class Main {

        public static void main(String[] args) throws InterruptedException {
            new Application().run();
        }
    }
  learner_created: false
- name: src/animals/greet/TimedGreeter.java
  visible: true
  text: |
    package animals.greet;

    import animals.util.Range;

    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;

    public class TimedGreeter implements Greeter {

        private final Range<Integer> MORNING = new Range<>(5, 12);
        private final Range<Integer> AFTERNOON = new Range<>(12, 18);

        private final Random random = new Random();

        @Override
        public void hello() {
            int currentHour = LocalTime.now().getHour();

            if (MORNING.isInRange(currentHour)) {
                System.out.println("Good morning!");
            } else if (AFTERNOON.isInRange(currentHour)) {
                System.out.println("Good afternoon!");
            } else {
                System.out.println("Good evening!");
            }
        }

        @Override
        public void goodbye() {
            System.out.println(List.of("Have a nice day!", "See you soon!", "Bye!").get(random.nextInt(3)));
        }
    }
  learner_created: false
- name: src/animals/util/Range.java
  visible: true
  text: |
    package animals.util;

    import org.jetbrains.annotations.NotNull;
    import org.jetbrains.annotations.Nullable;

    public class Range<T extends Number> {

        @NotNull
        private final T boundOne;

        @NotNull
        private final T boundTwo;

        private final boolean lowerInclusive;

        private final boolean upperInclusive;

        public Range(@NotNull T boundOne, @NotNull T boundTwo, boolean lowerInclusive, boolean upperInclusive) {
            this.boundOne = boundOne;
            this.boundTwo = boundTwo;
            this.lowerInclusive = lowerInclusive;
            this.upperInclusive = upperInclusive;
        }

        public Range(@NotNull T boundOne, @NotNull T boundTwo) {
            this(boundOne, boundTwo, true, false);
        }

        public T getLowerBound() {
            if (boundOneDouble() < boundTwoDouble()) {
                return boundOne;
            } else {
                return boundTwo;
            }
        }

        public T getUpperBound() {
            if (boundOneDouble() > boundTwoDouble()) {
                return boundOne;
            } else {
                return boundTwo;
            }
        }

        public <U extends Number> boolean isInRange(@Nullable final U number) {
            if (number == null) {
                return false;
            }

            double doubleValue = number.doubleValue();

            boolean satisfyLower = false;
            boolean satisfyUpper = false;

            if (lowerInclusive) {
                satisfyLower = doubleValue >= getLowerBound().doubleValue();
            } else {
                satisfyLower = doubleValue > getLowerBound().doubleValue();
            }

            if (upperInclusive) {
                satisfyUpper = doubleValue <= getUpperBound().doubleValue();
            } else {
                satisfyUpper = doubleValue < getUpperBound().doubleValue();
            }

            return satisfyLower && satisfyUpper;
        }

        private double boundOneDouble() {
            return boundOne.doubleValue();
        }

        private double boundTwoDouble() {
            return boundTwo.doubleValue();
        }
    }
  learner_created: false
- name: src/animals/base/Animal.java
  visible: true
  text: |
    package animals.base;

    import animals.linguistics.NounPhrase;
    import org.jetbrains.annotations.NotNull;


    public class Animal {

        @NotNull
        private final NounPhrase species;

        public Animal(@NotNull String species) {
            this.species = NounPhrase.parsePhrase(species);
        }

        @Override
        public String toString() {
            return species.toString();
        }
    }
  learner_created: false
- name: src/animals/base/Application.java
  visible: true
  text: |
    package animals.base;

    import animals.greet.Greeter;
    import animals.greet.TimedGreeter;
    import animals.input.Asker;
    import animals.input.AskerBuilder;

    import java.util.InputMismatchException;
    import java.util.List;
    import java.util.Random;

    public class Application implements Runnable {

        private final Greeter greeter = new TimedGreeter();

        private final Asker<Animal> animalAsker = AskerBuilder.asker()
                .withQuery("Enter an animal:")
                .addTransformer(String::trim)
                .addPredicate((String s) -> !s.isBlank())
                .addTransformer(Animal::new)
                .build();

        private final Asker<Boolean> yesNoAsker = AskerBuilder.asker()
                .withQuery("Is it a ...?")
                .addTransformer(String::trim)
                .addPredicate((String s) -> !s.isBlank())
                .addTransformer((String s) -> {
                    s = s.toLowerCase();
                    s = s.replaceFirst("\\p{Punct}", "");
                    switch (s) {
                        case "y", "yes", "yeah", "yep", "sure", "right", "affirmative",
                                "correct", "indeed", "you bet", "exactly", "you said it":
                            return true;
                        case "n", "no", "no way", "nah", "nope", "negative",
                                "i don't think so", "yeah no":
                            return false;
                    }
                    throw new InputMismatchException(
                            "The input (\"%s\") cannot be converted to a valid boolean response.".formatted(s));
                })
                .persistent(true)
                .withRetryPhrases(List.of(
                        "I'm not sure if I caught you: was it yes or no?",
                        "Funny, I still don't understand, is it yes or no?",
                        "Oh, it is too complicated for me: just tell me yes or no.",
                        "Could you please simply say yes or no?",
                        "Oh, no, don't try to confuse me: say yes or no."))
                .build();

        @Override
        public void run() {
            greeter.hello();
            System.out.println();

            Animal animal = animalAsker.ask();

            yesNoAsker.setQuery("Is it %s?".formatted(animal));
            if (yesNoAsker.ask()) {
                System.out.println("You answered: Yes");
            } else {
                System.out.println("You answered: No");
            }

            System.out.println();
            greeter.goodbye();
        }
    }
  learner_created: false
- name: src/animals/input/AskerBuilder.java
  visible: true
  text: |
    package animals.input;

    import org.jetbrains.annotations.NotNull;

    import java.util.InputMismatchException;
    import java.util.List;
    import java.util.function.Function;
    import java.util.function.Predicate;

    public final class AskerBuilder<T> {

        @NotNull
        private String inputPrompt = "> ";

        @NotNull
        private String query = "";

        private Function<@NotNull String, @NotNull T> transformer;

        private boolean persistent = false;

        private List<String> retryPhrases = List.of("Please enter a valid response.");

        private AskerBuilder() {
        }

        public static AskerBuilder<String> asker() {
            AskerBuilder<String> builder = new AskerBuilder<>();
            return builder.withTransformer(Function.identity());
        }

        public AskerBuilder<T> withInputPrompt(String inputPrompt) {
            this.inputPrompt = inputPrompt;
            return this;
        }

        public AskerBuilder<T> withQuery(String query) {
            this.query = query;
            return this;
        }

        /**
         * Composes the new transformer after already-existing transformers.
         *
         * @param transformer the new transformer
         * @param <R>         the type returned by the new transformer
         * @return builder
         */
        public <R> AskerBuilder<R> addTransformer(Function<T, R> transformer) {
            Function<String, R> newTransformer = this.transformer.andThen(transformer);
            return new AskerBuilder<R>().withQuery(query).withInputPrompt(inputPrompt).withTransformer(newTransformer);
        }

        /**
         * Composes the new predicate after already-existing transformers. An exception is thrown if the predicate fails.
         *
         * @param predicate the new predicate
         * @return builder
         */
        public AskerBuilder<T> addPredicate(Predicate<T> predicate) {
            return addTransformer((T t) -> {
                if (!predicate.test(t)) {
                    throw new InputMismatchException("The input (\"%s\") does not satisfy the predicate (%s).".formatted(t, predicate));
                }
                return t;
            });
        }

        public AskerBuilder<T> persistent(boolean persistent) {
            this.persistent = persistent;
            return this;
        }

        public AskerBuilder<T> withRetryPhrases(List<String> retryPhrases) {
            this.retryPhrases = retryPhrases;
            return this;
        }

        /**
         * Completely overwrites the previous transformer with the new one.
         *
         * @param transformer the new transformer
         * @return builder
         */
        private AskerBuilder<T> withTransformer(Function<String, T> transformer) {
            this.transformer = transformer;
            return this;
        }

        public Asker<T> build() {
            Asker<T> asker;

            if (persistent) {
                PersistentAsker<T> persistentAsker = new PersistentAsker<>();
                persistentAsker.setRetryPhrases(retryPhrases);
                asker = persistentAsker;
            } else {
                asker = new ConcreteAsker<>();
            }

            asker.setQuery(query);
            asker.setInputPrompt(inputPrompt);
            asker.setTransformer(transformer);

            return asker;
        }
    }
  learner_created: false
- name: src/animals/input/PersistentAsker.java
  visible: true
  text: "package animals.input;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\
    import org.jetbrains.annotations.NotNull;\n\nimport java.util.InputMismatchException;\n\
    import java.util.List;\nimport java.util.Random;\n\npublic class PersistentAsker<T>\
    \ extends ConcreteAsker<T> {\n\n    private final Random random = new Random();\n\
    \n    @NotNull\n    @Getter\n    @Setter\n    private List<String> retryPhrases;\n\
    \n    protected PersistentAsker() {\n    }\n\n    @Override\n    public @NotNull\
    \ T ask() throws InputMismatchException {\n        System.out.println(getQuery());\n\
    \        \n        T response = null;\n        boolean responseIsValid = false;\n\
    \n        while (!responseIsValid) {\n            try {\n                System.out.print(getInputPrompt());\n\
    \                response = getTransformer().apply(scanner.nextLine());\n\n  \
    \              // This line won't be reached if the super.ask() throws an exception.\n\
    \                responseIsValid = true;\n            } catch (InputMismatchException\
    \ e) {\n                System.out.println(retryPhrases.get(random.nextInt(retryPhrases.size())));\n\
    \            }\n        }\n\n        return response;\n    }\n}\n"
  learner_created: false
- name: src/animals/input/ConcreteAsker.java
  visible: true
  text: |
    package animals.input;

    import lombok.Getter;
    import lombok.Setter;
    import org.jetbrains.annotations.NotNull;

    import java.util.InputMismatchException;
    import java.util.Scanner;
    import java.util.function.Function;

    public class ConcreteAsker<T> implements Asker<T> {

        protected final Scanner scanner = new Scanner(System.in);

        @NotNull
        @Getter
        @Setter
        private String inputPrompt;

        @Getter
        @Setter
        @NotNull
        private String query;

        @Getter
        @Setter
        @NotNull
        private Function<@NotNull String, @NotNull T> transformer;

        protected ConcreteAsker() {
        }

        public @NotNull T ask() throws InputMismatchException {
            System.out.println(query);
            System.out.print(inputPrompt);
            return transformer.apply(scanner.nextLine());
        }
    }
  learner_created: false
- name: src/animals/input/Asker.java
  visible: true
  text: |
    package animals.input;

    import org.jetbrains.annotations.NotNull;

    import java.util.InputMismatchException;
    import java.util.function.Function;
    import java.util.function.Supplier;

    public interface Asker<T> extends Supplier<T> {

        @Override
        default @NotNull T get() {
            return ask();
        }

        @NotNull T ask() throws InputMismatchException;

        void setQuery(@NotNull String query);

        void setInputPrompt(@NotNull String inputPrompt);

        void setTransformer(@NotNull Function<@NotNull String, @NotNull T> transformer);
    }
  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "the-first-question",
                "positive-answers",
                "negative-answers",
                "unclear-answers",
                "guessing-game"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/guessing-game.data.yaml
  visible: false
  text: |
    #
    # This data file for test the Knowledge Tree
    #
    # Can it climb trees?
    #  yes -> Does it have tassels on his ears?
    #         -> yes -> Lynx
    #         -> no  -> Cat
    #  no  -> Is it living in the forest?
    #         -> yes -> wolf
    #         -> no  -> dog
    #
    ---
    - - |
        yes
        yes
      - a lynx

    - - |
        yes
        no
      - a cat

    - - |
        no
        yes
      - a wolf

    - - |
        no
        no
      - a dog
  learner_created: false
- name: test/guessing-game.script.yaml
  visible: false
  text: |+
    #
    # This is a scenario for testing of the Guessing Game
    #
    ---
    - [start]

    - - contains
      - I want to learn about animals
      - |
        When the program starts, the knowledge tree is empty.
        The program should express its desire to learn about animals.

    - - contains
      - Which animal do you like
      - To build an initial tree of knowledge, the program must ask the user about his favorite animal.

    - [input, cat]

    - - contains
      - play a game
      - After the user specifying a favorite animal, the program should offer him to play a game.

    - - contains
      - You think of an animal
      - The program must explain the rules of the game to the user.

    - - contains
      - Press enter
      - The program should be paused. The user will think of an animal and then press Enter.

    - [input, ""]

    #
    # After user press Enter the game started!
    #

    - - contains
      - Is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.

    - [input, No] # We think of about other animal, not about the cat

    - - contains
      - I give up. What animal do you have in mind?
      - If the program can't guess the animal, it must give up.

    - [input, dog] # Of course, our second animal is a dog!

    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.

    - [input, "it can climb trees"]

    - - contains
      - correct for a dog?
      - The program should clarify if the statement is correct for a dog.

    - [input, no]

    - - contains
      - The cat can climb trees
      - The program must generate the correct fact for the first animal.

    - - find
      - The dog can.t climb tree
      - The program must generate the correct fact for the second animal.

    - - find
      - "(?i)(again|repeat|one more)"
      - The program should invite the user to play this wonderful game again.

    - [input, yes] # Without a doubt, we are playing again!

    - - contains
      - You think of an animal
      - The program must explain the rules of the game to the user.

    - - find
      - Press enter when you.re ready
      - The program should be paused. The user will think of an animal and then press Enter.

    - [input, ""]

    #
    # The second game just started!
    #
    # Now in our Knowledge Tree has two animals and one fact.
    #

    - - contains
      - Can it climb trees?
      - After the first game, the starting question should be the question of fact.

    - [input, yes]

    - - contains
      - Is it a cat?
      - The program must assume that the animal is a cat.

    - - input
      - |
        no
        lynx
        it has tassels on his ears
        yes
        yes

    # We had played the game, and would like to play again.

    - [input, ""]

    #
    # The third game just started!
    #
    # Now in our Knowledge Tree has three animals and two fact.
    #

    - - contains
      - Can it climb trees?
      - |
      - The very first fact that the program learns is always the root element.
      - In every game, the question of this fact should be the first question.

    - [input, no] # No, the animal can't climb trees

    - - contains
      - Is it a dog?
      - The program must assume that the animal is a dog.

    - - input
      - |
        no
        wolf
        it is living in the forest
        yes
        yes

    # We had played the game, and would like to play again.

    - [input, ""]
    #
    # The forth game just started!
    #
    # The Knowledge Tree has four animals and tree fact.
    #
    # Now we will use data from the data file to substitute user answers.
    # This will allow us to check the correctness of the tree construction.

    - [input, "{0}"]

    - - contains
      - "Is it {1}?"
      - "The expected animal must be {1}"

    - [input, yes] # The program guessed the animal we conceived

    - [input, no] # We don't want to play anymore

    - - finish
      - If we do not want to play any more, then the program should exit.

  learner_created: false
feedback_link: https://hyperskill.org/projects/132/stages/705/implement#comment
status: Unchecked
record: -1
